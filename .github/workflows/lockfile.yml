name: Lockfile Maintenance
on:
  workflow_call:
    inputs:
      package-manager:
        type: string
        required: true
        default: npm
        description: The package manager used in the repository, either "npm", "pnpm", or "yarn".
      base-version:
        type: number
        default: 0
        description: The base major version of the repository.
      working-directory:
        type: string
        description: Directory to run this workflow.
        default: .
    secrets:
      REPO_TOKEN:
        description: A GitHub token with repo access.

env:
  NODE_VERSION: 22.x
  RUNNER_OS: linux
  RUNNER_ARCH: x64

jobs:
  maintenance:
    name: Maintenance
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.REPO_TOKEN || secrets.GITHUB_TOKEN }}

      - name: üîç Validate Package Manager
        run: |
          if [ ${{ inputs.package-manager }} != 'npm' ] && [ ${{ inputs.package-manager }} != 'pnpm' ] && [ ${{ inputs.package-manager }} != 'yarn' ]; then
            echo "Package manager not supported, exiting..."
            exit 1
          else
            echo "Package manager detected: ${{ inputs.package-manager }}"
          fi

      - name: ‚öôÔ∏è Setup PNPM
        if: inputs.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: ‚öôÔ∏è Get Package Manager Config
        id: config
        run: |
          if [ ${{ inputs.package-manager }} == 'npm' ]; then
            echo "cache_dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            echo "suffix=${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT
            echo "install_command=npm ci --cache $(npm config get cache) --prefer-offline" >> $GITHUB_OUTPUT
            echo "version_command=npm version --git-tag-version false" >> $GITHUB_OUTPUT
            echo "upgrade_command=npm upgrade" >> $GITHUB_OUTPUT
          elif [ ${{ inputs.package-manager }} == 'yarn' ]; then
            corepack enable
            YARN_VERSION=$(yarn --version)
            if [[ $YARN_VERSION =~ ^1.* ]]; then
              echo "cache_dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
              echo "install_command=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
              echo "version_command=yarn version --no-git-tag-version --new-version" >> $GITHUB_OUTPUT
              echo "upgrade_command=yarn upgrade" >> $GITHUB_OUTPUT
            else
              echo "cache_dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
              echo "install_command=yarn install --immutable" >> $GITHUB_OUTPUT
              WORKSPACES=$(yarn workspaces list --json | wc -l)
              if (( $WORKSPACES > 1 )); then
                echo "version_command=yarn workspaces foreach -A version" >> $GITHUB_OUTPUT
              else
                echo "version_command=yarn version" >> $GITHUB_OUTPUT
              fi
              echo "upgrade_command=rm yarn.lock && yarn up --mode=update-lockfile" >> $GITHUB_OUTPUT
            fi
            echo "suffix=${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT
          elif [ ${{ inputs.package-manager }} == 'pnpm' ]; then
            echo "cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
            echo "suffix=${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
            echo "install_command=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "version_command=pnpm version --no-git-tag-version" >> $GITHUB_OUTPUT
            echo "upgrade_command=pnpm up -r" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

      - name: ‚òÅÔ∏è Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.config.outputs.cache_dir }}
          key: node-cache-${{ runner.os }}-${{ inputs.package-manager }}-${{ steps.config.outputs.suffix }}
          restore-keys: node-cache-${{ runner.os }}-${{ inputs.package-manager }}-

      - name: ‚öôÔ∏è Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Dependencies
        run: ${{ steps.config.outputs.install_command }}

      - name: ‚¨ÜÔ∏è Update Lockfile
        run: ${{ steps.config.outputs.upgrade_command }}

      - name: üîç Check Lockfile Changes
        id: status
        run: |
          if [ $(git status --porcelain | wc -l) == "0" ]; then
            echo "No lockfile changes detected, exiting..."
            echo "STATUS=0" >> $GITHUB_OUTPUT
          else
            git status --porcelain
            echo "STATUS=1" >> $GITHUB_OUTPUT
          fi

      - name: ‚¨ÜÔ∏è Update Version
        id: bump
        if: steps.status.outputs.STATUS == '1'
        run: |
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          CURRENT_GIT_COUNT=$(git rev-list --count HEAD)
          GIT_COUNT=$(($CURRENT_GIT_COUNT + 1))

          MAJOR=$(( $(( $GIT_COUNT )) / 1000 + ${{ inputs.base-version }}))
          MINOR=$(( $(( $GIT_COUNT )) % 1000 / 100 ))
          PATCH=$(( $(( $GIT_COUNT )) % 1000 % 100 ))
          NEW_VERSION=$MAJOR.$MINOR.$PATCH

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            ${{ steps.config.outputs.version_command }} $NEW_VERSION
          fi
          echo "VERSION=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT

      - name: üöÄ Push Changes
        if: steps.status.outputs.STATUS == '1'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git status
          git commit -m "chore(deps): v${{ steps.bump.outputs.VERSION }} - lock file maintenance"
          git pull --rebase
          git push

      - name: ‚öôÔ∏è Get New Cache Hash
        id: hash
        run: |
          if [ ${{ inputs.package-manager }} == 'npm' ]; then
            echo "suffix=${{ hashFiles(format('{0}/package-lock.json', inputs.working-directory)) }}" >> $GITHUB_OUTPUT
          elif [ ${{ inputs.package-manager }} == 'pnpm' ]; then
            echo "suffix=${{ hashFiles(format('{0}/pnpm-lock.yaml', inputs.working-directory)) }}" >> $GITHUB_OUTPUT
          elif [ ${{ inputs.package-manager }} == 'yarn' ]; then
            echo "suffix=${{ hashFiles(format('{0}/yarn.lock', inputs.working-directory)) }}" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

      - name: ‚òÅÔ∏è Save New Cache
        if: steps.config.outputs.suffix != steps.hash.outputs.suffix
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.config.outputs.cache_dir }}
          key: node-cache-${{ runner.os }}-${{ inputs.package-manager }}-${{ steps.hash.outputs.suffix }}
